// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dataset.proto

package dspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateDatasetCommand struct {
	Dataset              *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	CreatedOn            int64    `protobuf:"varint,2,opt,name=createdOn,proto3" json:"createdOn,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDatasetCommand) Reset()         { *m = CreateDatasetCommand{} }
func (m *CreateDatasetCommand) String() string { return proto.CompactTextString(m) }
func (*CreateDatasetCommand) ProtoMessage()    {}
func (*CreateDatasetCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{0}
}

func (m *CreateDatasetCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDatasetCommand.Unmarshal(m, b)
}
func (m *CreateDatasetCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDatasetCommand.Marshal(b, m, deterministic)
}
func (m *CreateDatasetCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatasetCommand.Merge(m, src)
}
func (m *CreateDatasetCommand) XXX_Size() int {
	return xxx_messageInfo_CreateDatasetCommand.Size(m)
}
func (m *CreateDatasetCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatasetCommand.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatasetCommand proto.InternalMessageInfo

func (m *CreateDatasetCommand) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *CreateDatasetCommand) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *CreateDatasetCommand) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AssociateFileCommand struct {
	Dataset              *Dataset     `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	DatasetFile          *DatasetFile `protobuf:"bytes,2,opt,name=datasetFile,proto3" json:"datasetFile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AssociateFileCommand) Reset()         { *m = AssociateFileCommand{} }
func (m *AssociateFileCommand) String() string { return proto.CompactTextString(m) }
func (*AssociateFileCommand) ProtoMessage()    {}
func (*AssociateFileCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{1}
}

func (m *AssociateFileCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssociateFileCommand.Unmarshal(m, b)
}
func (m *AssociateFileCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssociateFileCommand.Marshal(b, m, deterministic)
}
func (m *AssociateFileCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssociateFileCommand.Merge(m, src)
}
func (m *AssociateFileCommand) XXX_Size() int {
	return xxx_messageInfo_AssociateFileCommand.Size(m)
}
func (m *AssociateFileCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_AssociateFileCommand.DiscardUnknown(m)
}

var xxx_messageInfo_AssociateFileCommand proto.InternalMessageInfo

func (m *AssociateFileCommand) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *AssociateFileCommand) GetDatasetFile() *DatasetFile {
	if m != nil {
		return m.DatasetFile
	}
	return nil
}

type GetDatasetQuery struct {
	Dataset              *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	CreatedOn            int64    `protobuf:"varint,2,opt,name=createdOn,proto3" json:"createdOn,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDatasetQuery) Reset()         { *m = GetDatasetQuery{} }
func (m *GetDatasetQuery) String() string { return proto.CompactTextString(m) }
func (*GetDatasetQuery) ProtoMessage()    {}
func (*GetDatasetQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{2}
}

func (m *GetDatasetQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDatasetQuery.Unmarshal(m, b)
}
func (m *GetDatasetQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDatasetQuery.Marshal(b, m, deterministic)
}
func (m *GetDatasetQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDatasetQuery.Merge(m, src)
}
func (m *GetDatasetQuery) XXX_Size() int {
	return xxx_messageInfo_GetDatasetQuery.Size(m)
}
func (m *GetDatasetQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDatasetQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetDatasetQuery proto.InternalMessageInfo

func (m *GetDatasetQuery) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *GetDatasetQuery) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *GetDatasetQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Dataset struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	FileIDs              []string `protobuf:"bytes,5,rep,name=fileIDs,proto3" json:"fileIDs,omitempty"`
	DatasetIDs           []string `protobuf:"bytes,6,rep,name=datasetIDs,proto3" json:"datasetIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dataset) Reset()         { *m = Dataset{} }
func (m *Dataset) String() string { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()    {}
func (*Dataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{3}
}

func (m *Dataset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataset.Unmarshal(m, b)
}
func (m *Dataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataset.Marshal(b, m, deterministic)
}
func (m *Dataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset.Merge(m, src)
}
func (m *Dataset) XXX_Size() int {
	return xxx_messageInfo_Dataset.Size(m)
}
func (m *Dataset) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset proto.InternalMessageInfo

func (m *Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dataset) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Dataset) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Dataset) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Dataset) GetFileIDs() []string {
	if m != nil {
		return m.FileIDs
	}
	return nil
}

func (m *Dataset) GetDatasetIDs() []string {
	if m != nil {
		return m.DatasetIDs
	}
	return nil
}

type MultipleDatasets struct {
	Datasets             []*Dataset `protobuf:"bytes,1,rep,name=datasets,proto3" json:"datasets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MultipleDatasets) Reset()         { *m = MultipleDatasets{} }
func (m *MultipleDatasets) String() string { return proto.CompactTextString(m) }
func (*MultipleDatasets) ProtoMessage()    {}
func (*MultipleDatasets) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{4}
}

func (m *MultipleDatasets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultipleDatasets.Unmarshal(m, b)
}
func (m *MultipleDatasets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultipleDatasets.Marshal(b, m, deterministic)
}
func (m *MultipleDatasets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultipleDatasets.Merge(m, src)
}
func (m *MultipleDatasets) XXX_Size() int {
	return xxx_messageInfo_MultipleDatasets.Size(m)
}
func (m *MultipleDatasets) XXX_DiscardUnknown() {
	xxx_messageInfo_MultipleDatasets.DiscardUnknown(m)
}

var xxx_messageInfo_MultipleDatasets proto.InternalMessageInfo

func (m *MultipleDatasets) GetDatasets() []*Dataset {
	if m != nil {
		return m.Datasets
	}
	return nil
}

type DatasetFile struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Filetype             string   `protobuf:"bytes,3,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatasetFile) Reset()         { *m = DatasetFile{} }
func (m *DatasetFile) String() string { return proto.CompactTextString(m) }
func (*DatasetFile) ProtoMessage()    {}
func (*DatasetFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{5}
}

func (m *DatasetFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasetFile.Unmarshal(m, b)
}
func (m *DatasetFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasetFile.Marshal(b, m, deterministic)
}
func (m *DatasetFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetFile.Merge(m, src)
}
func (m *DatasetFile) XXX_Size() int {
	return xxx_messageInfo_DatasetFile.Size(m)
}
func (m *DatasetFile) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetFile.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetFile proto.InternalMessageInfo

func (m *DatasetFile) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *DatasetFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatasetFile) GetFiletype() string {
	if m != nil {
		return m.Filetype
	}
	return ""
}

func (m *DatasetFile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DatasetAndFile struct {
	File                 *DatasetFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Dataset              *Dataset     `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DatasetAndFile) Reset()         { *m = DatasetAndFile{} }
func (m *DatasetAndFile) String() string { return proto.CompactTextString(m) }
func (*DatasetAndFile) ProtoMessage()    {}
func (*DatasetAndFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{6}
}

func (m *DatasetAndFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasetAndFile.Unmarshal(m, b)
}
func (m *DatasetAndFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasetAndFile.Marshal(b, m, deterministic)
}
func (m *DatasetAndFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetAndFile.Merge(m, src)
}
func (m *DatasetAndFile) XXX_Size() int {
	return xxx_messageInfo_DatasetAndFile.Size(m)
}
func (m *DatasetAndFile) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetAndFile.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetAndFile proto.InternalMessageInfo

func (m *DatasetAndFile) GetFile() *DatasetFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *DatasetAndFile) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

// Events
type DatasetCreatedEvent struct {
	DatasetID            string   `protobuf:"bytes,1,opt,name=DatasetID,proto3" json:"DatasetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatasetCreatedEvent) Reset()         { *m = DatasetCreatedEvent{} }
func (m *DatasetCreatedEvent) String() string { return proto.CompactTextString(m) }
func (*DatasetCreatedEvent) ProtoMessage()    {}
func (*DatasetCreatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{7}
}

func (m *DatasetCreatedEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasetCreatedEvent.Unmarshal(m, b)
}
func (m *DatasetCreatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasetCreatedEvent.Marshal(b, m, deterministic)
}
func (m *DatasetCreatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetCreatedEvent.Merge(m, src)
}
func (m *DatasetCreatedEvent) XXX_Size() int {
	return xxx_messageInfo_DatasetCreatedEvent.Size(m)
}
func (m *DatasetCreatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetCreatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetCreatedEvent proto.InternalMessageInfo

func (m *DatasetCreatedEvent) GetDatasetID() string {
	if m != nil {
		return m.DatasetID
	}
	return ""
}

type FileAssociatedWithDatasetEvent struct {
	DatasetID            string   `protobuf:"bytes,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	FileID               string   `protobuf:"bytes,2,opt,name=fileID,proto3" json:"fileID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileAssociatedWithDatasetEvent) Reset()         { *m = FileAssociatedWithDatasetEvent{} }
func (m *FileAssociatedWithDatasetEvent) String() string { return proto.CompactTextString(m) }
func (*FileAssociatedWithDatasetEvent) ProtoMessage()    {}
func (*FileAssociatedWithDatasetEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{8}
}

func (m *FileAssociatedWithDatasetEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileAssociatedWithDatasetEvent.Unmarshal(m, b)
}
func (m *FileAssociatedWithDatasetEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileAssociatedWithDatasetEvent.Marshal(b, m, deterministic)
}
func (m *FileAssociatedWithDatasetEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileAssociatedWithDatasetEvent.Merge(m, src)
}
func (m *FileAssociatedWithDatasetEvent) XXX_Size() int {
	return xxx_messageInfo_FileAssociatedWithDatasetEvent.Size(m)
}
func (m *FileAssociatedWithDatasetEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FileAssociatedWithDatasetEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FileAssociatedWithDatasetEvent proto.InternalMessageInfo

func (m *FileAssociatedWithDatasetEvent) GetDatasetID() string {
	if m != nil {
		return m.DatasetID
	}
	return ""
}

func (m *FileAssociatedWithDatasetEvent) GetFileID() string {
	if m != nil {
		return m.FileID
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateDatasetCommand)(nil), "dspb.CreateDatasetCommand")
	proto.RegisterType((*AssociateFileCommand)(nil), "dspb.AssociateFileCommand")
	proto.RegisterType((*GetDatasetQuery)(nil), "dspb.GetDatasetQuery")
	proto.RegisterType((*Dataset)(nil), "dspb.Dataset")
	proto.RegisterType((*MultipleDatasets)(nil), "dspb.MultipleDatasets")
	proto.RegisterType((*DatasetFile)(nil), "dspb.DatasetFile")
	proto.RegisterType((*DatasetAndFile)(nil), "dspb.DatasetAndFile")
	proto.RegisterType((*DatasetCreatedEvent)(nil), "dspb.DatasetCreatedEvent")
	proto.RegisterType((*FileAssociatedWithDatasetEvent)(nil), "dspb.FileAssociatedWithDatasetEvent")
}

func init() { proto.RegisterFile("dataset.proto", fileDescriptor_f69247dc9b20935f) }

var fileDescriptor_f69247dc9b20935f = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5f, 0x8b, 0xd3, 0x40,
	0x10, 0x6f, 0xd2, 0xd8, 0x5e, 0x26, 0xf4, 0xbc, 0x5b, 0xeb, 0x11, 0xca, 0x71, 0x84, 0x05, 0xb1,
	0x82, 0x54, 0x68, 0xc5, 0xa7, 0xf3, 0xe1, 0xb8, 0xaa, 0xf8, 0x20, 0x62, 0x04, 0x7d, 0x35, 0xd7,
	0x5d, 0x7b, 0x81, 0x36, 0x29, 0xd9, 0xe9, 0xc1, 0x7d, 0x13, 0xfd, 0x3e, 0x7e, 0x30, 0xd9, 0xcd,
	0x24, 0xcd, 0x3f, 0x14, 0x1f, 0x7c, 0xcb, 0xcc, 0xef, 0x37, 0x7f, 0x7e, 0x33, 0xb3, 0x81, 0x91,
	0x88, 0x30, 0x52, 0x12, 0x67, 0xbb, 0x2c, 0xc5, 0x94, 0x39, 0x42, 0xed, 0x6e, 0xf8, 0x16, 0xc6,
	0xd7, 0x99, 0x8c, 0x50, 0x2e, 0x73, 0xf0, 0x3a, 0xdd, 0x6e, 0xa3, 0x44, 0xb0, 0xa7, 0x30, 0x24,
	0xba, 0x6f, 0x05, 0xd6, 0xd4, 0x9b, 0x8f, 0x66, 0x9a, 0x3f, 0x23, 0x5a, 0x58, 0xa0, 0xec, 0x1c,
	0xdc, 0x95, 0x49, 0x20, 0x3e, 0x26, 0xbe, 0x1d, 0x58, 0xd3, 0x7e, 0x78, 0x70, 0xb0, 0x63, 0xb0,
	0x63, 0xe1, 0xf7, 0x03, 0x6b, 0xea, 0x86, 0x76, 0x2c, 0x38, 0xc2, 0xf8, 0x4a, 0xa9, 0x74, 0x15,
	0x47, 0x28, 0xdf, 0xc6, 0x1b, 0xf9, 0xcf, 0xe5, 0x16, 0xe0, 0xd1, 0xa7, 0x0e, 0x37, 0x05, 0xbd,
	0xf9, 0x69, 0x8d, 0xac, 0x81, 0xb0, 0xca, 0xe2, 0xb7, 0xf0, 0xf0, 0x9d, 0x44, 0x82, 0x3f, 0xed,
	0x65, 0x76, 0xff, 0xbf, 0xf4, 0xfd, 0xb4, 0x60, 0x48, 0x29, 0x18, 0x03, 0x27, 0x89, 0xb6, 0xd2,
	0xe4, 0x77, 0x43, 0xf3, 0xcd, 0x7c, 0x18, 0xde, 0xc9, 0x4c, 0xc5, 0x69, 0x9e, 0xcb, 0x0d, 0x0b,
	0xb3, 0x99, 0x89, 0x9d, 0xc1, 0x40, 0x61, 0x84, 0x7b, 0xe5, 0x3b, 0xc6, 0x47, 0x96, 0xce, 0xf0,
	0x3d, 0xde, 0xc8, 0xf7, 0x4b, 0xe5, 0x3f, 0x08, 0xfa, 0x3a, 0x03, 0x99, 0xec, 0x02, 0x80, 0x9a,
	0xd6, 0xe0, 0xc0, 0x80, 0x15, 0x0f, 0x7f, 0x0d, 0x27, 0x1f, 0xf6, 0x1b, 0x8c, 0x77, 0x9b, 0x62,
	0xd9, 0x8a, 0x3d, 0x83, 0x23, 0x62, 0x28, 0xdf, 0x0a, 0xfa, 0xed, 0x39, 0x94, 0x30, 0x5f, 0x83,
	0x57, 0x19, 0xb0, 0xee, 0x63, 0x95, 0x26, 0x28, 0x13, 0x24, 0x81, 0x85, 0x59, 0xea, 0xb6, 0x2b,
	0xba, 0x27, 0x70, 0xa4, 0xdb, 0xc4, 0xfb, 0x9d, 0x24, 0x8d, 0xa5, 0x4d, 0xca, 0x9d, 0x72, 0x86,
	0xdf, 0xe0, 0x98, 0x0a, 0x5d, 0x25, 0xc2, 0xd4, 0x7a, 0x02, 0x8e, 0x66, 0xd3, 0xa6, 0x3a, 0xb6,
	0x6d, 0xe0, 0xea, 0x4e, 0xed, 0x3f, 0xed, 0x94, 0x2f, 0xe0, 0x51, 0x71, 0xee, 0xf9, 0x26, 0xdf,
	0xdc, 0xe9, 0xc6, 0xcf, 0xc1, 0x5d, 0x16, 0xe3, 0x22, 0x51, 0x07, 0x07, 0xff, 0x02, 0x17, 0xba,
	0x56, 0x79, 0xbe, 0xe2, 0x6b, 0x8c, 0xb7, 0x04, 0x97, 0xf1, 0xa2, 0x19, 0x5f, 0x3a, 0xf4, 0x42,
	0xf3, 0x4d, 0xd1, 0x60, 0xc8, 0x9a, 0xff, 0xb2, 0xe0, 0xa4, 0xd0, 0xbb, 0x5e, 0x67, 0x72, 0x1d,
	0xa1, 0x64, 0x97, 0x30, 0xaa, 0x3d, 0x4b, 0x36, 0xc9, 0xa5, 0x74, 0xbd, 0xd5, 0x49, 0x5d, 0x26,
	0xef, 0xb1, 0x97, 0x00, 0x87, 0x7b, 0x67, 0x8f, 0x73, 0xb8, 0xf1, 0x02, 0xda, 0x51, 0x97, 0x30,
	0xaa, 0xbd, 0xcd, 0xa2, 0x66, 0xd7, 0x83, 0x6d, 0x45, 0xcf, 0x7f, 0xd8, 0x70, 0x5a, 0xcd, 0xff,
	0x19, 0xd3, 0x4c, 0xb2, 0xe7, 0xb5, 0x4e, 0xea, 0x41, 0xed, 0x0e, 0x5e, 0x81, 0x77, 0x60, 0xab,
	0x26, 0xfd, 0x2c, 0x37, 0x9b, 0x37, 0xcc, 0x7b, 0xec, 0x45, 0x73, 0x5a, 0x7f, 0x2f, 0xd4, 0x90,
	0x3a, 0xae, 0x31, 0xe8, 0xee, 0x3a, 0x07, 0x9b, 0x17, 0x32, 0x41, 0xed, 0x43, 0x9c, 0xb4, 0x5d,
	0xbc, 0x77, 0x33, 0x30, 0x3f, 0xdc, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x09, 0x8f,
	0x86, 0x81, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatasetAggregateClient is the client API for DatasetAggregate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetAggregateClient interface {
	CreateDataset(ctx context.Context, in *CreateDatasetCommand, opts ...grpc.CallOption) (*Dataset, error)
	GetDataset(ctx context.Context, in *GetDatasetQuery, opts ...grpc.CallOption) (*Dataset, error)
	AssociateFile(ctx context.Context, in *AssociateFileCommand, opts ...grpc.CallOption) (*Dataset, error)
}

type datasetAggregateClient struct {
	cc *grpc.ClientConn
}

func NewDatasetAggregateClient(cc *grpc.ClientConn) DatasetAggregateClient {
	return &datasetAggregateClient{cc}
}

func (c *datasetAggregateClient) CreateDataset(ctx context.Context, in *CreateDatasetCommand, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/dspb.DatasetAggregate/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetAggregateClient) GetDataset(ctx context.Context, in *GetDatasetQuery, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/dspb.DatasetAggregate/GetDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetAggregateClient) AssociateFile(ctx context.Context, in *AssociateFileCommand, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/dspb.DatasetAggregate/AssociateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetAggregateServer is the server API for DatasetAggregate service.
type DatasetAggregateServer interface {
	CreateDataset(context.Context, *CreateDatasetCommand) (*Dataset, error)
	GetDataset(context.Context, *GetDatasetQuery) (*Dataset, error)
	AssociateFile(context.Context, *AssociateFileCommand) (*Dataset, error)
}

func RegisterDatasetAggregateServer(s *grpc.Server, srv DatasetAggregateServer) {
	s.RegisterService(&_DatasetAggregate_serviceDesc, srv)
}

func _DatasetAggregate_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetAggregateServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dspb.DatasetAggregate/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetAggregateServer).CreateDataset(ctx, req.(*CreateDatasetCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetAggregate_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetAggregateServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dspb.DatasetAggregate/GetDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetAggregateServer).GetDataset(ctx, req.(*GetDatasetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetAggregate_AssociateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateFileCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetAggregateServer).AssociateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dspb.DatasetAggregate/AssociateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetAggregateServer).AssociateFile(ctx, req.(*AssociateFileCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetAggregate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dspb.DatasetAggregate",
	HandlerType: (*DatasetAggregateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataset",
			Handler:    _DatasetAggregate_CreateDataset_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _DatasetAggregate_GetDataset_Handler,
		},
		{
			MethodName: "AssociateFile",
			Handler:    _DatasetAggregate_AssociateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataset.proto",
}

// DatasetQueryStoreClient is the client API for DatasetQueryStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetQueryStoreClient interface {
	GetDataset(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error)
	GetDatasets(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*MultipleDatasets, error)
	CreateDataset(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error)
	AssociateFile(ctx context.Context, in *DatasetAndFile, opts ...grpc.CallOption) (*Dataset, error)
	CreateFile(ctx context.Context, in *DatasetFile, opts ...grpc.CallOption) (*DatasetFile, error)
}

type datasetQueryStoreClient struct {
	cc *grpc.ClientConn
}

func NewDatasetQueryStoreClient(cc *grpc.ClientConn) DatasetQueryStoreClient {
	return &datasetQueryStoreClient{cc}
}

func (c *datasetQueryStoreClient) GetDataset(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/dspb.DatasetQueryStore/GetDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetQueryStoreClient) GetDatasets(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*MultipleDatasets, error) {
	out := new(MultipleDatasets)
	err := c.cc.Invoke(ctx, "/dspb.DatasetQueryStore/GetDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetQueryStoreClient) CreateDataset(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/dspb.DatasetQueryStore/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetQueryStoreClient) AssociateFile(ctx context.Context, in *DatasetAndFile, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/dspb.DatasetQueryStore/AssociateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetQueryStoreClient) CreateFile(ctx context.Context, in *DatasetFile, opts ...grpc.CallOption) (*DatasetFile, error) {
	out := new(DatasetFile)
	err := c.cc.Invoke(ctx, "/dspb.DatasetQueryStore/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetQueryStoreServer is the server API for DatasetQueryStore service.
type DatasetQueryStoreServer interface {
	GetDataset(context.Context, *Dataset) (*Dataset, error)
	GetDatasets(context.Context, *Dataset) (*MultipleDatasets, error)
	CreateDataset(context.Context, *Dataset) (*Dataset, error)
	AssociateFile(context.Context, *DatasetAndFile) (*Dataset, error)
	CreateFile(context.Context, *DatasetFile) (*DatasetFile, error)
}

func RegisterDatasetQueryStoreServer(s *grpc.Server, srv DatasetQueryStoreServer) {
	s.RegisterService(&_DatasetQueryStore_serviceDesc, srv)
}

func _DatasetQueryStore_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetQueryStoreServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dspb.DatasetQueryStore/GetDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetQueryStoreServer).GetDataset(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetQueryStore_GetDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetQueryStoreServer).GetDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dspb.DatasetQueryStore/GetDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetQueryStoreServer).GetDatasets(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetQueryStore_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetQueryStoreServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dspb.DatasetQueryStore/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetQueryStoreServer).CreateDataset(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetQueryStore_AssociateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetAndFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetQueryStoreServer).AssociateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dspb.DatasetQueryStore/AssociateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetQueryStoreServer).AssociateFile(ctx, req.(*DatasetAndFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetQueryStore_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetQueryStoreServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dspb.DatasetQueryStore/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetQueryStoreServer).CreateFile(ctx, req.(*DatasetFile))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetQueryStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dspb.DatasetQueryStore",
	HandlerType: (*DatasetQueryStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataset",
			Handler:    _DatasetQueryStore_GetDataset_Handler,
		},
		{
			MethodName: "GetDatasets",
			Handler:    _DatasetQueryStore_GetDatasets_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _DatasetQueryStore_CreateDataset_Handler,
		},
		{
			MethodName: "AssociateFile",
			Handler:    _DatasetQueryStore_AssociateFile_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _DatasetQueryStore_CreateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataset.proto",
}
